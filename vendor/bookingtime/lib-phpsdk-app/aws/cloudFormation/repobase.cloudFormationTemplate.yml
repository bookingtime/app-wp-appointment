---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'repo-base'
Metadata:
  Author: 'd.kokot@bookingtime.com'
  Version: '1.0.0'
  Dersion: '28.10.2020 16:40:59'
Parameters:
  creationDate: {Type: 'String', Description: 'The creation date of the stack is used for resource tags.', AllowedPattern: '^[1-9][0-9]{3}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3])\:([0-5][0-9])\:([0-5][0-9])([Zz]|([\+|\-](0[0-9]|1[0-2])\:[0-5][0-9]))$'}
  repo: {Type: 'String', Description: 'Name of the git repository', AllowedPattern: '[a-zA-Z0-9-]{3,20}'}
  awsAccountGithub: {Type: 'Number', Description: 'The account-number for bookingtime-github aws account.', MinValue: 100000000000, MaxValue: 999999999999}
  awsAccountDev: {Type: 'Number', Description: 'The account-number for bookingtime-dev aws account.', MinValue: 100000000000, MaxValue: 999999999999}
  awsAccountStage: {Type: 'Number', Description: 'The account-number for bookingtime-stage aws account.', MinValue: 100000000000, MaxValue: 999999999999}
  awsAccountProd: {Type: 'Number', Description: 'The account-number for bookingtime-prod aws account.', MinValue: 100000000000, MaxValue: 999999999999}
  awsAccountSandbox: {Type: 'Number', Description: 'The account-number for bookingtime-sandbox aws account.', MinValue: 100000000000, MaxValue: 999999999999}
  logGroupAlreadyExists: {Type: 'String', Description: 'if the repo cloudWatch logGroup already exists, dont create it', AllowedPattern: 'true|false'}
Conditions:
  createLogGroup: !Equals [!Ref 'logGroupAlreadyExists', 'false']
Resources:



  # Logs::LogGroup
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html
  logsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub ['/repo/${repo}', {repo: !Ref 'repo'}]
      RetentionInDays: 30



  # S3::Bucket
  # NOTE: S3::BucketPolicy will be set by otto
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  # https://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html
  # https://nodramadevops.com/2020/04/why-protecting-data-in-s3-is-hard-and-a-least-privilege-bucket-policy-to-help/
  s3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Delete'
    Properties:
      BucketName: !Sub ['s3-bucket-repo-${repo}', {repo: !Ref 'repo'}]
      PublicAccessBlockConfiguration: {BlockPublicAcls: true, BlockPublicPolicy: true, IgnorePublicAcls: true, RestrictPublicBuckets: true}
      VersioningConfiguration: {Status: 'Enabled'}
      Tags:
        - {Key: 'Name', Value: !Sub ['s3-bucket-repo-${repo}', {repo: !Ref 'repo'}]}

  # S3::BucketPolicy
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
  s3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref 's3Bucket'
      PolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountGithub'}
            Action: ['s3:*']
            Resource: [!Sub ['arn:aws:s3:::s3-bucket-repo-${repo}', {repo: !Ref 'repo'}], !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]]
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountGithub}:role/service-role/iam-role-${repo}-*', {awsAccountGithub: !Ref 'awsAccountGithub', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountDev'}
            Action: ['s3:*']
            Resource: [!Sub ['arn:aws:s3:::s3-bucket-repo-${repo}', {repo: !Ref 'repo'}], !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]]
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountDev}:role/service-role/iam-role-${repo}-*', {awsAccountDev: !Ref 'awsAccountDev', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountStage'}
            Action: ['s3:*']
            Resource: [!Sub ['arn:aws:s3:::s3-bucket-repo-${repo}', {repo: !Ref 'repo'}], !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]]
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountStage}:role/service-role/iam-role-${repo}-*', {awsAccountStage: !Ref 'awsAccountStage', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountProd'}
            Action: ['s3:*']
            Resource: [!Sub ['arn:aws:s3:::s3-bucket-repo-${repo}', {repo: !Ref 'repo'}], !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]]
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountProd}:role/service-role/iam-role-${repo}-*', {awsAccountProd: !Ref 'awsAccountProd', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountSandbox'}
            Action: ['s3:*']
            Resource: [!Sub ['arn:aws:s3:::s3-bucket-repo-${repo}', {repo: !Ref 'repo'}], !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]]
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountSandbox}:role/service-role/iam-role-${repo}-*', {awsAccountSandbox: !Ref 'awsAccountSandbox', repo: !Ref 'repo'}]}}

  # Custom::S3BucketCleanupOnDelete
  # delete all content of S3 bucket
  s3BucketCleanupOnDelete:
    Type: 'Custom::S3BucketCleanupOnDelete'
    DependsOn: 's3Bucket'
    Properties:
      ServiceToken: !ImportValue 'cloudFormation-stack-init-lambda:lambda-function-s3-bucket-cleanup'
      BucketName: !Sub ['s3-bucket-repo-${repo}', {repo: !Ref 'repo'}]



  # ECR::Repository
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html
  # https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html
  ecrRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref 'repo'
      ImageScanningConfiguration: {scanOnPush: 'true'}
      ImageTagMutability: 'MUTABLE'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only one untagged image, expire all others",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Keep only 99 images, expire all others",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 99
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountGithub'}
            Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountGithub}:role/service-role/iam-role-${repo}-*', {awsAccountGithub: !Ref 'awsAccountGithub', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountDev'}
            Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountDev}:role/service-role/iam-role-${repo}-*', {awsAccountDev: !Ref 'awsAccountDev', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountStage'}
            Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountStage}:role/service-role/iam-role-${repo}-*', {awsAccountStage: !Ref 'awsAccountStage', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountProd'}
            Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountProd}:role/service-role/iam-role-${repo}-*', {awsAccountProd: !Ref 'awsAccountProd', repo: !Ref 'repo'}]}}
          - Effect: 'Allow'
            Principal: {AWS: !Ref 'awsAccountSandbox'}
            Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
            Condition: {StringLike: {aws:PrincipalArn: !Sub ['arn:aws:iam::${awsAccountSandbox}:role/service-role/iam-role-${repo}-*', {awsAccountSandbox: !Ref 'awsAccountSandbox', repo: !Ref 'repo'}]}}
      Tags:
        - {Key: 'Name', Value: !Sub ['ecs-repository-repo-${repo}', {repo: !Ref 'repo'}]}

  # Custom::EcrRepositoryCleanup
  # delete all images in ECR repository
  ecrRepositoryCleanupOnDelete:
    Type: 'Custom::EcrRepositoryCleanup'
    DependsOn: 'ecrRepository'
    Properties:
      ServiceToken: !ImportValue 'cloudFormation-stack-init-lambda:lambda-function-ecr-repository-cleanup'
      RepositoryName: !Ref 'repo'



  # IAM::Role
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  iamRoleCodeBuild:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ['iam-role-${repo}-base-codeBuild', {repo: !Ref 'repo'}] # max 64 chars
      Description: !Sub ['Allows CodeBuild project to call AWS services for repo ${repo}.', {repo: !Ref 'repo'}]
      Path: '/service-role/'
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{Effect: 'Allow', Principal: {Service: ['codebuild.amazonaws.com']}, Action: ['sts:AssumeRole']}]
      Policies:
        - PolicyName: 'codestar-connections'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['codestar-connections:UseConnection']
                Resource: !Sub 'arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*'
        - PolicyName: 'ecr'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:CompleteLayerUpload', 'ecr:GetDownloadUrlForLayer', 'ecr:InitiateLayerUpload', 'ecr:PutImage', 'ecr:UploadLayerPart']
                Resource: !Sub ['arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}', {repo: !Ref 'repo'}]
              - Effect: 'Allow'
                Action: ['ecr:GetAuthorizationToken']
                Resource: '*'
        - PolicyName: 'logs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: !Sub ['arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/repo/${repo}*', {repo: !Ref 'repo'}]
        - PolicyName: 'secretsmanager'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['secretsmanager:GetSecretValue']
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/codeBuild/sourceCredential/gitHub*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/codeBuild/sourceCredential/dockerHub*'
        - PolicyName: 's3'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['s3:GetObject', 's3:GetObjectVersion', 's3:PutObject']
                Resource: !Sub ['arn:aws:s3:::s3-bucket-repo-${repo}/*', {repo: !Ref 'repo'}]
      Tags:
        - {Key: 'Name', Value: !Sub ['iam-role-repo-${repo}-base-codeBuild', {repo: !Ref 'repo'}]}

  # IAM::InstanceProfile
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
  iamInstanceProfileCodeBuild:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles: [!Ref 'iamRoleCodeBuild']



  # CodeBuild::Project
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
  # https://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
  # https://docs.aws.amazon.com/codepipeline/latest/userguide/create-cloudtrail-S3-source-cfn.html
  codeBuildProjectTesting:
    Type: 'AWS::CodeBuild::Project'
    DependsOn: 'iamRoleCodeBuild'
    Properties:
      Name: !Sub ['codeBuild-project-repo-${repo}-base-testing', {repo: !Ref 'repo'}]
      Description: !Sub ['If a pull request is created or updated, get source-code from GitHub and execute tests for every feature branch of repo ${repo}.', {repo: !Ref 'repo'}]
      BadgeEnabled: false
      ServiceRole: !GetAtt 'iamRoleCodeBuild.Arn'
      TimeoutInMinutes: 15
      QueuedTimeoutInMinutes: 60
      Source:
        Type: 'GITHUB'
        Location: !Sub 'https://github.com/bookingtime/${repo}.git'
        Auth: {Type: 'OAUTH'}
        GitCloneDepth: 1
        BuildSpec: 'aws/codeBuild_buildspec_testing.yml'
        ReportBuildStatus: true
      Triggers:
        Webhook: true
        FilterGroups:
          - [{Type: 'EVENT', Pattern: 'PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED'}, {Type: 'BASE_REF', Pattern: '^refs/heads/master$'}]
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL' # 15.03.2021 18:34:26 DK: larger/better types does NOT perform building speed
        PrivilegedMode: true
        Image: 'aws/codebuild/standard:4.0'
        ImagePullCredentialsType: 'CODEBUILD'
        EnvironmentVariables:
          - {Name: 'REPO', Type: 'PLAINTEXT', Value: !Ref 'repo'}
          - {Name: 'AWS_REGION', Type: 'PLAINTEXT', Value: !Sub '${AWS::Region}'}
          - {Name: 'AWS_ACCOUNT_ID', Type: 'PLAINTEXT', Value: !Sub '${AWS::AccountId}'}
          - {Name: 'IMAGE_ECR_URL', Type: 'PLAINTEXT', Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'}
          - {Name: 'IMAGE_REPO_NAME', Type: 'PLAINTEXT', Value: !Ref 'repo'}
          - {Name: 'IMAGE_REPO_URL', Type: 'PLAINTEXT', Value: !Sub ['${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repo}', {repo: !Ref 'repo'}]}
      LogsConfig: {CloudWatchLogs: {Status: 'ENABLED', GroupName: !Sub ['/repo/${repo}', {repo: !Ref 'repo'}], StreamName: 'codeBuild/testing'}}
      Cache: {Type: 'LOCAL', Modes: ['LOCAL_DOCKER_LAYER_CACHE']}
      Artifacts: {Type: 'NO_ARTIFACTS'}
      Tags:
        - {Key: 'Name', Value: !Sub ['codeBuild-project-repo-${repo}-base-testing', {repo: !Ref 'repo'}]}
  codeBuildProjectVersioning:
    Type: 'AWS::CodeBuild::Project'
    DependsOn: 'iamRoleCodeBuild'
    Properties:
      Name: !Sub ['codeBuild-project-repo-${repo}-base-versioning', {repo: !Ref 'repo'}]
      Description: !Sub ['Get source-code from GitHub and create release version for master branch of repo ${repo} and store source-code in S3 bucket to trigger deployment pipelines.', {repo: !Ref 'repo'}]
      BadgeEnabled: false
      ServiceRole: !GetAtt 'iamRoleCodeBuild.Arn'
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 60
      Source:
        Type: 'GITHUB'
        Location: !Sub 'https://github.com/bookingtime/${repo}.git'
        Auth: {Type: 'OAUTH'}
        GitCloneDepth: 0
        BuildSpec: 'aws/codeBuild_buildspec_versioning.yml'
        ReportBuildStatus: true
      Triggers:
        Webhook: true
        FilterGroups:
          - [{Type: 'EVENT', Pattern: 'PUSH'}, {Type: 'HEAD_REF', Pattern: '^refs/heads/master$'}]
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL' # 28.07.2022 17:04:30 DK+DN: we have tested no better performance in building speed for versioning (react-apps)
        PrivilegedMode: true
        Image: 'aws/codebuild/standard:4.0'
        ImagePullCredentialsType: 'CODEBUILD'
        EnvironmentVariables:
          - {Name: 'REPO', Type: 'PLAINTEXT', Value: !Ref 'repo'}
          - {Name: 'AWS_REGION', Type: 'PLAINTEXT', Value: !Sub '${AWS::Region}'}
          - {Name: 'AWS_ACCOUNT_ID', Type: 'PLAINTEXT', Value: !Sub '${AWS::AccountId}'}
          - {Name: 'IMAGE_ECR_URL', Type: 'PLAINTEXT', Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'}
          - {Name: 'IMAGE_REPO_NAME', Type: 'PLAINTEXT', Value: !Ref 'repo'}
          - {Name: 'IMAGE_REPO_URL', Type: 'PLAINTEXT', Value: !Sub ['${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repo}', {repo: !Ref 'repo'}]}
      LogsConfig: {CloudWatchLogs: {Status: 'ENABLED', GroupName: !Sub ['/repo/${repo}', {repo: !Ref 'repo'}], StreamName: 'codeBuild/versioning'}}
      Cache: {Type: 'LOCAL', Modes: ['LOCAL_DOCKER_LAYER_CACHE']}
      Artifacts:
        Type: 'S3'
        Location: !Sub ['s3-bucket-repo-${repo}', {repo: !Ref 'repo'}]
        Name: 'gitSource-master.zip'
        NamespaceType: 'NONE'
        Path: 'source-artifact'
        OverrideArtifactName: false
        Packaging: 'ZIP'
        EncryptionDisabled: true
      Tags:
        - {Key: 'Name', Value: !Sub ['codeBuild-project-repo-${repo}-base-versioning', {repo: !Ref 'repo'}]}

  # Custom::CodeBuildBuildsCleanupOnDelete
  # delete codeBuild build-histroy
  codeBuildBuildsCleanupOnDeleteTesting:
    Type: 'Custom::CodeBuildBuildsCleanupOnDelete'
    DependsOn: 'codeBuildProjectTesting'
    Properties:
      ServiceToken: !ImportValue 'cloudFormation-stack-init-lambda:lambda-function-codeBuild-builds-cleanup'
      ProjectName: !Sub ['codeBuild-project-repo-${repo}-testing', {repo: !Ref 'repo'}]
  codeBuildBuildsCleanupOnDeleteVersioning:
    Type: 'Custom::CodeBuildBuildsCleanupOnDelete'
    DependsOn: 'codeBuildProjectVersioning'
    Properties:
      ServiceToken: !ImportValue 'cloudFormation-stack-init-lambda:lambda-function-codeBuild-builds-cleanup'
      ProjectName: !Sub ['codeBuild-project-repo-${repo}-versioning', {repo: !Ref 'repo'}]
